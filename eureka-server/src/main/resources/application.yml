server:
  port: 7001

spring:
  application:
    #应用名称（在注册中显示的）
    name: eureka-server
  thymeleaf:
#    prefix: classpath:/templates/
#      suffix: .html
#      mode: HTML5
#      cache: false
    cache: false
    encoding: UTF-8
    content-type: text/html
    mode: LEGACYHTML5

eureka:
  client:
    #此客户端是否能获取eureka服务器注册表上的其他服务信息，默认为true false表示不需要  该服务是注册中心不需要获取其他信息
    fetch-registry: false
    #实例是否在eureka服务器上注册自己的信息以供其他服务发现，默认为true， false表示不向注册中心注册自己 一般是不需要的
    register-with-eureka: false
    #与Eureka注册服务中心的通信zone和url地址
    serviceUrl:
      #http://localhost:8080/eureka/eureka
      #defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka  #单机版
      defaultZone: http://eureka7002.com:7002/eureka/,http://eureka7003.com:7003/eureka/ #集群版 将当前的 Eureka Server 注册到 7002 和 7003 上，形成一组互相注册的
  #服务注册中心实例的主机名
  instance:
    hostname: eureka7001.com  #eureka服务端的实例名称
    #本身就是注册中心，不需要在注册中心显示该服务，所以不需要下面两个
#    prefer-ip-address: true       #访问路径可显示IP地址
#    instance-id: 127.0.0.1:7001   #显示在主注册中心的名称
  server:
    #设为false，关闭自我保护，即Eureka server在云心光器件会去统计心跳失败比例在15分钟之内是否低于85%,如果低于85%，EurekaServer
    #会将这些事例保护起来，让这些事例不会过期，但是在保护器内如果刚哈这个服务提供者非正常下线了，此时服务消费者会拿到一个无效的服务
    #实例，此时调用会失败，对于这个问题需要服务消费者端有一些容错机制，如重试、断路器等；
    #无法访问时他们两会有不同的提示（在注册中心）
    #Eureka 的自我保护机制 我的理解
    #开启时（默认） 当一个服务和Eureka不在正常通讯时，原因可以有很多种 Eureka会保留该服务的相关信息，但是这个时候是无法正常访问
    #关闭时        当一个服务和Eureka不在正常通讯时，直接从Eureka中移除该服务
    #开启还是关闭，取决于你是在Eureka中做相关处理还是在访问的服务中
    #亲测，这个东西没啥用o(╥﹏╥)o
    enable-self-preservation: false
    #扫描失效服务的间隔时间（单位是毫秒，默认是60*1000，即60s）
    eviction-interval-timer-in-ms: 10000
management:
  endpoints:
    web:
      exposure:
        include: "*"    #默认只开启info 和 health   * 表示全部
info:     #info 配置还没搞明白，但是这样做至少不会报错
  app.name: eureka-server
  build.artifactId: $project.artifactId$
  build.version: $project.version$
